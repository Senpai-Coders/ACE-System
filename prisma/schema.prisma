// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// IMPORTANT NOTE
// if POSSIBLE apply these following property to the models
// createdBy Int?
// updatedBy Int?
// deletedBy Int?
// createdAt DateTime  @default(now())
// updatedAt DateTime  @updatedAt
// deletedAt DateTime?
// deleted Boolean @default(false)

enum Role {
    root
    admin
    staff
}

model User {
    id Int @id @default(autoincrement())

    picture  String? @default("/images/default.png")
    name     String
    email    String  @unique
    password String
    branchId Int

    dateVerified DateTime?
    verified     Boolean?  @default(false)

    branch Branch @relation(fields: [branchId], references: [id])
    role   Role   @default(staff)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    createdBy Int?
    updatedBy Int?
    deletedBy Int?

    deleted Boolean @default(false)
}

model Branch {
    id Int @id @default(autoincrement())

    branchName        String
    branchDescription String
    branchAddress     String
    branchPicture     String? @default("/images/default.png")

    users User[]

    createdBy Int?
    updatedBy Int?
    deletedBy Int?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    deleted   Boolean?  @default(false)
}

enum EventType {
    election
}

model Event {
    id          Int       @id @default(autoincrement())
    title       String
    description String
    date        DateTime
    location    String
    category    EventType
    deleted     Boolean

    createdBy Int?
    updatedBy Int?
    deletedBy Int?

    election Election?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    attendees EventAttendees[]
}

enum gender {
    Male
    Female
}

model EventAttendees {
    id             String   @id @default(uuid())
    passbookNumber String
    firstName      String
    middleName     String
    lastName       String
    gender         gender
    birthday       DateTime
    contact        String

    eventId Int
    event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

    registered Boolean @default(false)

    votes Votes[]

    @@unique([eventId, passbookNumber])
}

enum ElectionStatus {
    pending
    live
    done
}

model Election {
    id           Int            @id @default(autoincrement())
    electionName String
    status       ElectionStatus

    positions  Position[] // 1st to create
    canditates Candidate[] // 2nd
    votes      Votes[]

    eventId Int   @unique
    event   Event @relation(fields: [eventId], references: [id])

    deleted Boolean @default(false)

    createdBy Int?
    updatedBy Int?
    deletedBy Int?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model Position {
    id                Int    @id @default(autoincrement())
    positionName      String
    numberOfSelection Int

    electionId Int
    election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade)

    candidates Candidate[]
}

model Candidate {
    id             Int    @id @default(autoincrement())
    firstName      String
    lastName       String
    passbookNumber Int
    picture        String

    electionId Int
    election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade)

    pisitonId Int
    position  Position @relation(fields: [pisitonId], references: [id], onDelete: Cascade)
    votes     Votes[]

    @@unique([electionId, passbookNumber])
}

model Votes {
    id Int @id @default(autoincrement())

    attendeeId  String
    electionId  Int
    candidateId Int

    attendee  EventAttendees @relation(fields: [attendeeId], references: [id])
    candidate Candidate      @relation(fields: [candidateId], references: [id])
    election  Election       @relation(fields: [electionId], references: [id])
}
