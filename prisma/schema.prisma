// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// IMPORTANT NOTE
// if POSSIBLE apply these following property to the models
// createdBy Int?
// updatedBy Int?
// deletedBy Int?
// createdAt DateTime  @default(now())
// updatedAt DateTime  @updatedAt
// deletedAt DateTime?
// deleted Boolean @default(false)

enum Role {
    root
    admin
    staff
}

model User {
    id Int @id @default(autoincrement())

    picture  String? @default("/images/default.png")
    name     String
    email    String  @unique
    password String
    branchId Int

    dateVerified DateTime?
    verified     Boolean?  @default(false)

    branch Branch @relation(fields: [branchId], references: [id])
    role   Role  @default(staff)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    createdBy Int?
    updatedBy Int?
    deletedBy Int?

    deleted Boolean @default(false)
}

model Branch {
    id Int @id @default(autoincrement())

    branchName        String
    branchDescription String
    branchAddress     String
    branchPicture     String? @default("/images/default.png")

    users User[]

    createdBy Int?
    updatedBy Int?
    deletedBy Int?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    deleted   Boolean?  @default(false)
}

enum EventType {
    election
    gathering
}

model Event {
    id          Int       @id @default(autoincrement())
    title       String
    description String
    date        DateTime
    location    String
    category    EventType
    deleted     Boolean
    election    Election? @relation(fields: [electionId], references: [id])
    electionId  Int?      @unique
    createdBy   Int?
    updatedBy   Int?
    deletedBy   Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ElectionStatus {
    pending
    live
    done
}

model Election {
    id        Int            @id @default(autoincrement())
    e_name    String
    startDate DateTime
    endDate   DateTime
    status    ElectionStatus

    canditates Candidate[]
    positions  Position[]
    votes      Votes[]

    event Event?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Candidate {
    id        Int    @id @default(autoincrement())
    firstName String
    lastName  String
    accountNo Int
    picture   String

    electionId Int
    election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    pisitonId Int
    position  Position @relation(fields: [pisitonId], references: [id])
    votes     Votes[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([accountNo])
}

model Position {
    id           Int    @id @default(autoincrement())
    positionName String
    allowedVotes Int

    electionId Int
    election   Election @relation(fields: [electionId], references: [id])

    candidates Candidate[]
}

model Votes {
    id        Int @id @default(autoincrement())
    accountNo Int // NOTE: Idk about this though, san to marereference

    electionId  Int
    candidateId Int

    candidate Candidate @relation(fields: [candidateId], references: [id])
    election  Election  @relation(fields: [electionId], references: [id])
}
